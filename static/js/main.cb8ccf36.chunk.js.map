{"version":3,"sources":["components/tile/Tile.js","components/score/ScoreBoard.js","components/restart/RestartButton.js","components/board/board_functions.js","components/board/Board.js","App.js","index.js"],"names":["Tile","props","className","style","backgroundColor","Math","floor","value","ScoreBoard","score","highscore","RestartButton","onClick","clickHandler","initiateBoard","addRandomTile","Array","fill","zerosToBottom","a","b","transposeMatrix","arr","map","_","colIndex","row","handleCollisions","direction","dir","reverse","i","length","newValue","getEmptyTilesIndexes","tiles","emptyTilesIndexes","forEach","item","index","push","makeRows","flatArr","rows","slice","getRandom","random","no","tilesFlatArray","concat","emptyTiles","randTileIndex","randValue","GameOverDiv","status","Board","useState","setTiles","setScore","gameStatus","setGameStatus","localStorage","getItem","highScore","setHighScore","useEffect","document","addEventListener","keyPressHandler","removeEventListener","includes","checkGameStatus","setItem","left","useCallback","key","right","up","down","increaseScore","e","prevTiles","newTiles","moveScore","increaseScoreFunction","collided","tempScore","sort","move","nothingHappened","every","tile","row_index","toString","renderRow","display","flexDirection","alignItems","height","width","textAlign","lineHeight","justifyContent","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb8ccf36.chunk.js","sourcesContent":["function Tile(props) {\n    const colors = {\n        0: '#ffff99',\n        1: '#ffff33',\n        2: '#ffad33',\n        4: '#d86400',\n        8: '#de4000'\n    }\n\n    return (\n        <div \n            className=\"tile\" \n            style={{backgroundColor: colors[Math.floor(props.value % 15)]}}>\n            {(props.value > 0) ? props.value : ''}\n        </div>\n    )\n}\n\nexport default Tile;","function ScoreBoard( {score, highscore} ) {\n    return (\n        <div className=\"score\">\n            <div style={{'float':'left'}}>\n                <h3>Score: {score}</h3>\n            </div>\n            <div style={{'float':'right'}}>\n            \t<h3>Highscore: {highscore}</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default ScoreBoard;","function RestartButton(props) {\n        return (\n            <button onClick={props.clickHandler}>\n                Restart\n            </button>\n            )\n}\n\nexport default RestartButton;","function initiateBoard() {\n    const tiles = Array(4).fill(Array(4).fill(0))\n    return addRandomTile(tiles, 2)\n}\n\n\nfunction zerosToBottom(a, b) {\n    // Callback-function for array.sort()\n    // If a tile value is greater than 0, it gets sorted to a higher index,\n    // and vice versa. \n    if (a !== 0 && b === 0) {\n        return 1;\n    }\n    else if (a === 0 && b !== 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n\n\nfunction transposeMatrix(arr) {\n    return arr[0].map((_,colIndex) => arr.map((row) => row[colIndex]));\n}\n\n\nfunction move(tiles, direction, increaseScoreFunction) {\n    let collided = [];\n    let tempScore = 0;\n    let moveScore = 0;\n    \n    // Transpose board\n    if (direction === 'ArrowUp' || direction === 'ArrowDown'){\n        tiles = transposeMatrix(tiles)\n        }\n\n    if (direction === 'ArrowRight' || direction === 'ArrowDown') {\n        // Move, collide, move again to cover up empty spaces.\n        tiles = tiles.map((row) => {\n            row.sort(zerosToBottom);\n            [collided, tempScore] = handleCollisions(row, 'ArrowRight', increaseScoreFunction)\n            moveScore += tempScore;\n            collided.sort(zerosToBottom)\n            return collided;\n        });\n    }\n\n    else if (direction === 'ArrowLeft' || direction === 'ArrowUp') {\n        tiles = tiles.map((row) => {\n            // Reverse row first so same sorting algorithm can be used.\n            // Move, collide, move again to cover up empty spaces.\n            row.reverse();\n            row.sort(zerosToBottom);\n            [collided, tempScore] = handleCollisions(row, 'ArrowLeft', increaseScoreFunction)\n            moveScore += tempScore;\n            collided.sort(zerosToBottom)\n            collided.reverse()\n            return collided;\n        });\n    }\n\n    // Transpose it back again\n    if (direction === 'ArrowUp' || direction === 'ArrowDown'){\n        tiles = transposeMatrix(tiles)\n        }\n\n    return [tiles, moveScore];\n}\n\n\nfunction handleCollisions(row, direction) {\n    // Iterate over row in opposite direction of player's move. Adjacent \n    // tiles with the same value gets added up and assigned to the tile\n    // farthes away in the direction of the move. The other is set to 0.\n    let dir = 1;\n    let score = 0;\n    \n    if (direction === 'ArrowRight' || direction === 'ArrowDown') {\n        row.reverse()\n        dir = -1\n    }\n\n    for (var i = 0; i<row.length; i++) {\n\n        if ((row[i] === row[i+dir]) && (row[i] > 0)) {\n            let newValue = row[i] + row[i+dir];\n            row[i] = newValue;\n            row[i+dir] = 0;\n            score += newValue;\n        }\n    }\n\n    if (direction === 'ArrowRight' || direction === 'ArrowDown') {\n        row.reverse()\n    }\n\n    return [row, score];\n}\n\n\nfunction getEmptyTilesIndexes(tiles) {\n    const emptyTilesIndexes = [];\n\n    tiles.forEach((item, index) => {\n        if (item === 0) {\n            emptyTilesIndexes.push(index);\n        }\n    });\n\n    return emptyTilesIndexes;\n}\n\n\nfunction makeRows(flatArr) {\n    const rows = [];\n    let i;\n\n    for (i=0; i<flatArr.length; i+=4) {\n        rows.push(flatArr.slice(i, i+4));\n        }\n    return rows;\n}\n\n\nfunction getRandom(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n    \n\nfunction addRandomTile(tiles, no=1) {        \n    const tilesFlatArray = [].concat(...tiles);\n    for (let i = 0; i < no; i++){\n        const emptyTiles = getEmptyTilesIndexes(tilesFlatArray);\n        const randTileIndex = getRandom(emptyTiles);\n        const randValue = getRandom([2,4]); // The random added tile should have a value of 2 or 4.\n\n        tilesFlatArray[randTileIndex] = randValue;\n    }\n\n    tiles = makeRows(tilesFlatArray);\n\n    return tiles;\n}\n\n\nexport {\n    initiateBoard,\n    zerosToBottom,\n    transposeMatrix,\n    move,\n    handleCollisions,\n    getEmptyTilesIndexes,\n    makeRows,\n    getRandom,\n    addRandomTile\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport Tile from '../tile/Tile';\nimport ScoreBoard from '../score/ScoreBoard';\nimport RestartButton from '../restart/RestartButton';\nimport { initiateBoard, move, getEmptyTilesIndexes, addRandomTile } from './board_functions'\n\nfunction GameOverDiv( {status} ) {\n    return (\n        <div className='gameOver' >\n            <h1>{(status === 'won') ? 'youHaveWonOU WON!': 'GAME OVER'}</h1>\n        </div>\n    )\n}\n\nfunction Board(props) {\n\n// SETUP\n// =====\n\n    const [tiles, setTiles] = useState(initiateBoard());\n    const [score, setScore] = useState(0);\n    const [gameStatus, setGameStatus] = useState(false);\n    const [highScore, setHighScore] = useState( () => localStorage.getItem('2048_highscore') || 0 );\n\n    useEffect( () => {\n        if (gameStatus === false){\n            document.addEventListener('keydown', keyPressHandler);\n        }\n\n        return () => {\n            document.removeEventListener('keydown', keyPressHandler);\n        }\n    })\n\n    useEffect( () => {\n        checkGameStatus(tiles);  \n        setHighScore( (score > highScore) ? score : highScore )\n    }, [tiles])\n\n    useEffect( () => {\n        localStorage.setItem('2048_highscore', highScore);\n    },[highScore])\n\n    const left = useCallback(()=>{\n        keyPressHandler({key: 'ArrowLeft'})\n    }, []);\n\n    const right = useCallback(()=>{\n        keyPressHandler({key: 'ArrowRight'})\n\n    }, []);\n\n    const up = useCallback(()=>{\n        keyPressHandler({key: 'ArrowUp'})\n\n    }, []);\n\n    const down = useCallback(()=>{\n        keyPressHandler({key: 'ArrowDown'})\n\n    }, []);\n\n    function increaseScore(value) {\n        setScore(score + value);\n    }\n\n    function checkGameStatus(tiles) {\n        const tilesFlatArray = [].concat(...tiles);\n        const emptyTiles = getEmptyTilesIndexes(tilesFlatArray)\n        if (emptyTiles.length < 1) {\n            setGameStatus('lost');\n        }\n        if (tilesFlatArray.includes(2048)) {\n            setGameStatus('won')\n        }\n    }\n\n    function keyPressHandler(e) {\n        const prevTiles = [].concat(...tiles);\n        let newTiles = [];\n        let moveScore = 0;\n\n        switch(e.key) {\n            case \"ArrowUp\":\n            case \"ArrowDown\":\n            case \"ArrowLeft\":\n            case \"ArrowRight\":\n                [newTiles, moveScore] = move(tiles, e.key, increaseScore)\n                break;\n\n            default:\n                return;\n        }\n\n        // Check if move changed board. If so, add new random tile.\n        const nothingHappened = prevTiles.every( (tile, index) => tile === [].concat(...newTiles)[index] );\n        newTiles = nothingHappened ? newTiles : addRandomTile(newTiles);\n        \n        increaseScore(moveScore);\n        setTiles([...newTiles]);\n    }\n\n    function restartHandler() {\n        setGameStatus(false);\n        setScore(0);\n        setTiles(initiateBoard());\n    }\n\n    function renderRow(row, row_index) {\n        return (\n            <tr key={row_index} className=\"row\">\n                {row.map((tile, i) => <td key={i.toString()}><Tile value={tile} /></td>)}\n            </tr>\n        )\n    }\n\n    return (\n        <div className=\"container\">\n            <ScoreBoard score={score} highscore={highScore} />\n            <div className=\"board\">\n                {(gameStatus !== false) ? <GameOverDiv status={gameStatus} /> : null}\n                <table className=\"table\">\n                    <tbody>\n                        {tiles.map((row, i) => renderRow(row, i))}\n                    </tbody>\n                </table>\n            </div>\n            <div  style = {{display: 'flex', flexDirection:'column',alignItems: 'center'}}>\n                <div className=\"up\" style = {{height: '2rem', width:\"50%\", backgroundColor: \"red\", textAlign: 'center',lineHeight: \"2rem\"}} onClick = {up} >up</div>\n                <div style = {{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\n                    <div className=\"left\" style = {{height: '2rem', width:\"10rem\", backgroundColor: \"green\",textAlign: 'center', lineHeight: \"2rem\"}} onClick = {left} >left</div>\n                    <div className=\"right\" style = {{height: '2rem', width:\"10rem\", backgroundColor: \"yellow\",textAlign: 'center', lineHeight: \"2rem\"}} onClick = {right} >right</div>\n                </div>\n                <div className=\"down\" style = {{height: '2rem', width:\"50%\",backgroundColor: \"red\",textAlign: 'center',lineHeight: \"2rem\"}} onClick = {down} >down</div>\n           </div>\n            {(gameStatus !== false) ? <RestartButton clickHandler={restartHandler} /> : null}\n        </div>\n    );\n}\n\nexport default Board;\n","import React from 'react';\n\nimport './App.css';\nimport Board from './components/board/Board';\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Board />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}